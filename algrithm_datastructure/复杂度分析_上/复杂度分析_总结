复杂度分析
1.时间复杂度分析原则
1）只关注循环执行次数最多的一段代码，忽略公式中的常量、低阶和系数
2）加法原则:总复杂度等于量级最大的那段代码的复杂度  T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))).
3) 乘法原则: 嵌套代码的复杂度等于嵌套内外代码复杂度的乘积

非多项式量级：O(2^n) 和 O(n!)
非多项式量级的算法问题也叫 NP 问题

对数阶的时间复杂度，参考等比数列通项来分析，另外由于对数的基底可以互相转换，所以无论是2为底，还是3为底，都是可以理解为O(logn)的时间复杂度

对于空间复杂度，只需要关注代码中开辟的空间数量级就可以了