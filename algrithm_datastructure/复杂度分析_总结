复杂度分析上
1.时间复杂度分析原则
1）只关注循环执行次数最多的一段代码，忽略公式中的常量、低阶和系数
2）加法原则:总复杂度等于量级最大的那段代码的复杂度  T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))).
3) 乘法原则: 嵌套代码的复杂度等于嵌套内外代码复杂度的乘积

非多项式量级：O(2^n) 和 O(n!)
非多项式量级的算法问题也叫 NP 问题

对数阶的时间复杂度，参考等比数列通项来分析，另外由于对数的基底可以互相转换，所以无论是2为底，还是3为底，都是可以理解为O(logn)的时间复杂度

对于空间复杂度，只需要关注代码中开辟的空间数量级就可以了


复杂度分析下
最好情况时间复杂度
最坏情况时间复杂度
平均时间复杂度，也叫加权平均时间复杂度，或期望平均时间复杂度
均摊时间复杂度：（重点）对于一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在
前后连贯的时序关系，这个时候，我们将这一组操作放在一块分析，看是否能将较高的时间复杂度那次操作的耗时，平摊到其他时间复杂度比较低的操作上，而且
能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况的时间复杂度---其实均摊时间复杂度是一种特殊的时间复杂度

// 全局变量，大小为 10 的数组 array，长度 len，下标 i。
int array[] = new int[10]; 
int len = 10;
int i = 0;

// 往数组中添加一个元素
void add(int element) {
   if (i >= len) { // 数组空间不够了
     // 重新申请一个 2 倍大小的数组空间
     int new_array[] = new int[len*2];
     // 把原来 array 数组中的数据依次 copy 到 new_array
     for (int j = 0; j < len; ++j) {
       new_array[j] = array[j];
     }
     // new_array 复制给 array，array 现在大小就是 2 倍 len 了
     array = new_array;
     len = 2 * len;
   }
   // 将 element 放到下标为 i 的位置，下标 i 加一
   array[i] = element;
   ++i;
}


这个例子：
最好 O(1)
最坏 O(len)
平均 O(1)
均摊 O(1)

